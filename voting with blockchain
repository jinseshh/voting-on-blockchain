// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingSystem {
    enum ElectionState { NOT_STARTED, ONGOING, ENDED }

    struct Candidate {
        uint id;
        string name;
        string proposal;
        uint voteCount;
    }

    struct Voter {
        bool isRegistered;
        bool hasVoted;
        bool voteDelegated;
        address delegateTo;
        uint votedCandidateId;
    }

    address public admin;
    ElectionState public electionState;
    uint public candidateCount;
    uint public voterCount;

    mapping(uint => Candidate) public candidates;
    mapping(address => Voter) public voters;
    address[] public voterAddresses;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    modifier inState(ElectionState _state) {
        require(electionState == _state, "Action not allowed in current election state");
        _;
    }

    constructor() {
        admin = msg.sender;
        electionState = ElectionState.NOT_STARTED;
    }

    // Admin Functions

    function addCandidate(string memory _name, string memory _proposal) public onlyAdmin inState(ElectionState.NOT_STARTED) {
        candidateCount++;
        candidates[candidateCount] = Candidate(candidateCount, _name, _proposal, 0);
    }

    function addVoter(address _voter) public onlyAdmin inState(ElectionState.NOT_STARTED) {
        require(!voters[_voter].isRegistered, "Voter is already registered");
        voters[_voter] = Voter(true, false, false, address(0), 0);
        voterAddresses.push(_voter);
        voterCount++;
    }

    function startElection() public onlyAdmin inState(ElectionState.NOT_STARTED) {
        electionState = ElectionState.ONGOING;
    }

    function endElection() public onlyAdmin inState(ElectionState.ONGOING) {
        electionState = ElectionState.ENDED;
    }

    // Voter Functions

    function delegateVote(address _delegateTo) public inState(ElectionState.ONGOING) {
        Voter storage sender = voters[msg.sender];
        require(sender.isRegistered, "You are not registered as a voter");
        require(!sender.hasVoted, "You have already voted");
        require(!sender.voteDelegated, "You have already delegated your vote");
        require(_delegateTo != address(0) && _delegateTo != msg.sender, "Invalid delegate address");

        sender.voteDelegated = true;
        sender.delegateTo = _delegateTo;
    }

    function castVote(uint _candidateId) public inState(ElectionState.ONGOING) {
        Voter storage sender = voters[msg.sender];
        require(sender.isRegistered, "You are not registered as a voter");
        require(!sender.hasVoted, "You have already voted");

        if (sender.voteDelegated) {
            require(voters[sender.delegateTo].isRegistered, "Delegate address is not a registered voter");
            require(!voters[sender.delegateTo].hasVoted, "Delegate has already voted");
            require(!voters[sender.delegateTo].voteDelegated, "Delegate has delegated their vote");

            voters[sender.delegateTo].votedCandidateId = _candidateId;
            voters[sender.delegateTo].hasVoted = true;
        } else {
            sender.votedCandidateId = _candidateId;
            sender.hasVoted = true;
        }

        candidates[_candidateId].voteCount++;
    }

    // View Functions

    function getCandidateDetails(uint _candidateId) public view returns (uint, string memory, string memory) {
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.proposal);
    }

    function getVoterDetails(address _voter) public view returns (bool, bool, bool, address, uint) {
        Voter memory voter = voters[_voter];
        return (voter.isRegistered, voter.hasVoted, voter.voteDelegated, voter.delegateTo, voter.votedCandidateId);
    }

    function showElectionResults(uint _candidateId) public view returns (uint, string memory, uint) {
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.voteCount);
    }

    function showElectionWinner() public view returns (string memory, uint, uint) {
        require(electionState == ElectionState.ENDED, "Election has not ended");

        uint winningVoteCount = 0;
        uint winningCandidateId = 0;
        string memory winningCandidateName;

        for (uint i = 1; i <= candidateCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateId = i;
                winningCandidateName = candidates[i].name;
            }
        }

        return (winningCandidateName, winningCandidateId, winningVoteCount);
    }

    function getTotalCandidates() public view returns (uint) {
        return candidateCount;
    }

    function getTotalVoters() public view returns (uint) {
        return voterCount;
    }

    function checkElectionStatus() public view returns (ElectionState) {
        return electionState;
    }

    function getVoterProfile(address _voter) public view returns (string memory, uint, bool) {
        Voter memory voter = voters[_voter];
        string memory candidateName = "Not voted";
        if (voter.hasVoted) {
            candidateName = candidates[voter.votedCandidateId].name;
        }
        return (candidateName, voter.votedCandidateId, voter.voteDelegated);
    }
}
